// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/coworking/{id}": {
            "get": {
                "description": "Получает коворкинг по ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "coworking"
                ],
                "summary": "Получить коворкинг",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID коворкинга",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Coworking"
                        }
                    },
                    "400": {
                        "description": "Неверный ID коворкинга",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Коворкинг не найден",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Обновляет данные коворкинга",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "coworking"
                ],
                "summary": "Обновить коворкинг",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID коворкинга",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Обновленные данные",
                        "name": "coworking",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateCoworkingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Coworking"
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса или ID",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Коворкинг не найден",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Получает список пользователей с пагинацией",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Список пользователей",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Номер страницы",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Размер страницы",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.UserListResponse"
                        }
                    },
                    "400": {
                        "description": "Неверные параметры пагинации",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Создает нового пользователя в системе",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Создать пользователя",
                "parameters": [
                    {
                        "description": "Данные пользователя",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Пользователь уже существует",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Получает пользователя по ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Получить пользователя",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID пользователя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный ID пользователя",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "api.PaginationInfo": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "api.UserListResponse": {
            "type": "object",
            "properties": {
                "pagination": {
                    "$ref": "#/definitions/api.PaginationInfo"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UserResponse"
                    }
                }
            }
        },
        "models.Achievement": {
            "type": "object",
            "properties": {
                "color": {
                    "description": "HEX цвет",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Coworking": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer"
                },
                "current_people": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "monitors_free": {
                    "type": "integer"
                },
                "monitors_total": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "playstation_available": {
                    "type": "boolean"
                },
                "responsible_user": {
                    "$ref": "#/definitions/models.User"
                },
                "responsible_user_id": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/models.CoworkingStatus"
                },
                "support_contact": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.CoworkingStatus": {
            "type": "string",
            "enum": [
                "open",
                "closed"
            ],
            "x-enum-varnames": [
                "StatusOpen",
                "StatusClosed"
            ]
        },
        "models.CreateUserRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Telegram ID (primary key)",
                    "type": "integer"
                },
                "username": {
                    "description": "уникальный логин",
                    "type": "string"
                }
            }
        },
        "models.UpdateCoworkingRequest": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer"
                },
                "current_people": {
                    "type": "integer"
                },
                "monitors_free": {
                    "type": "integer"
                },
                "monitors_total": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "playstation_available": {
                    "type": "boolean"
                },
                "responsible_user_id": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/models.CoworkingStatus"
                },
                "support_contact": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "achievements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Achievement"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "donations": {
                    "type": "integer"
                },
                "id": {
                    "description": "telegrammid",
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "lvl": {
                    "type": "integer"
                },
                "role": {
                    "$ref": "#/definitions/models.UserRole"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "visits": {
                    "description": "количество визитов",
                    "type": "integer"
                },
                "xp": {
                    "type": "integer"
                }
            }
        },
        "models.UserResponse": {
            "type": "object",
            "properties": {
                "achievements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Achievement"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "lvl": {
                    "type": "integer"
                },
                "role": {
                    "$ref": "#/definitions/models.UserRole"
                },
                "username": {
                    "type": "string"
                },
                "visits": {
                    "type": "integer"
                },
                "xp": {
                    "type": "integer"
                }
            }
        },
        "models.UserRole": {
            "type": "string",
            "enum": [
                "user",
                "admin",
                "moderator"
            ],
            "x-enum-varnames": [
                "RoleUser",
                "RoleAdmin",
                "RoleMod"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8000",
	BasePath:         "/api/v1",
	Schemes:          []string{"http"},
	Title:            "Vibeton API",
	Description:      "API для приложения Vibeton - коворкинг платформа",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
